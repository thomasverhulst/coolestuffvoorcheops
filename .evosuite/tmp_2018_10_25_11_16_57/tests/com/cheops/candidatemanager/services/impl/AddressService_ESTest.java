/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 25 09:30:13 GMT 2018
 */

package com.cheops.candidatemanager.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.models.Address;
import com.cheops.candidatemanager.repositories.AddressRepository;
import com.cheops.candidatemanager.services.impl.AddressService;
import java.util.List;
import java.util.Optional;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AddressService_ESTest extends AddressService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      PriorityQueue<Address> priorityQueue0 = new PriorityQueue<Address>();
      Address address0 = new Address();
      priorityQueue0.add(address0);
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn(priorityQueue0).when(addressRepository0).findAll();
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      List<Address> list0 = addressService0.getAllAdresses();
      assertTrue(list0.contains(address0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(addressRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      Address address0 = new Address();
      Address address1 = addressService0.addAddress(address0);
      assertNull(address1.getLand());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      Integer integer0 = new Integer((-3121));
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, integer0).when(addressRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      addressService0.addAddress((Address) null);
      // Undeclared exception!
      try { 
        addressService0.updateAddress((Address) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.cheops.candidatemanager.models.Address
         //
         verifyException("com.cheops.candidatemanager.repositories.AddressRepository$MockitoMock$524590610", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(addressRepository0).findById(anyInt());
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      // Undeclared exception!
      try { 
        addressService0.getAddressById(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.AddressService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(addressRepository0).findById(anyInt());
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      // Undeclared exception!
      try { 
        addressService0.deleteAdress(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.AddressService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn("n~rd#!Qo7c?]o").when(addressRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      // Undeclared exception!
      try { 
        addressService0.addAddress((Address) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.cheops.candidatemanager.models.Address
         //
         verifyException("com.cheops.candidatemanager.repositories.AddressRepository$MockitoMock$524590610", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AddressService addressService0 = new AddressService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(addressRepository0).findAll();
      Injector.inject(addressService0, (Class<?>) AddressService.class, "addressRepository", (Object) addressRepository0);
      Injector.validateBean(addressService0, (Class<?>) AddressService.class);
      // Undeclared exception!
      try { 
        addressService0.getAllAdresses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.AddressService", e);
      }
  }
}
