/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 16 13:00:11 GMT 2018
 */

package com.tv.tutorials.coolestuffvoorcheops.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tv.tutorials.coolestuffvoorcheops.models.SalaryPackage;
import com.tv.tutorials.coolestuffvoorcheops.repositories.SalaryPackageRepository;
import com.tv.tutorials.coolestuffvoorcheops.services.impl.SalaryPackageService;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SalaryPackageService_ESTest extends SalaryPackageService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      HashSet<SalaryPackage> hashSet0 = new HashSet<SalaryPackage>();
      SalaryPackage salaryPackage0 = new SalaryPackage();
      hashSet0.add(salaryPackage0);
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn(hashSet0).when(salaryPackageRepository0).findAll();
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      List<SalaryPackage> list0 = salaryPackageService0.getAllSalaryPackages();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      Double double0 = new Double((-35.707323439114));
      SalaryPackage salaryPackage0 = new SalaryPackage((-35.707323439114), " u,u'0L[s!j?", double0, double0, true, true);
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn(salaryPackage0).when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      SalaryPackage salaryPackage1 = salaryPackageService0.addSalaryPackage(salaryPackage0);
      assertTrue(salaryPackage1.isGroupInsurance());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackage salaryPackage0 = new SalaryPackage();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, salaryPackage0).when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      SalaryPackage salaryPackage1 = salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      assertEquals(0.0, salaryPackage1.getGrossSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackage salaryPackage0 = new SalaryPackage();
      salaryPackage0.setGrossSalary(765.07409);
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, salaryPackage0).when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      SalaryPackage salaryPackage1 = salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      assertEquals(765.07409, salaryPackage1.getGrossSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackage salaryPackage0 = new SalaryPackage((-1.0), "3m:", (Double) null, (Double) null, false, false);
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (String) null, salaryPackage0).when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      salaryPackageService0.addSalaryPackage(salaryPackage0);
      salaryPackageService0.updateSalaryPackage((SalaryPackage) null);
      salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      SalaryPackage salaryPackage1 = salaryPackageService0.addSalaryPackage((SalaryPackage) null);
      assertFalse(salaryPackage1.isHospitalization());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn("lh=<Kl").when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      // Undeclared exception!
      try { 
        salaryPackageService0.updateSalaryPackage((SalaryPackage) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.tv.tutorials.coolestuffvoorcheops.models.SalaryPackage
         //
         verifyException("com.tv.tutorials.coolestuffvoorcheops.repositories.SalaryPackageRepository$MockitoMock$715869215", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(salaryPackageRepository0).findById(anyInt());
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      // Undeclared exception!
      try { 
        salaryPackageService0.getSalaryPackageById(1022);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tv.tutorials.coolestuffvoorcheops.services.impl.SalaryPackageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(salaryPackageRepository0).findAll();
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      // Undeclared exception!
      try { 
        salaryPackageService0.getAllSalaryPackages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tv.tutorials.coolestuffvoorcheops.services.impl.SalaryPackageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn("d,;h1o]%U").when(salaryPackageRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      // Undeclared exception!
      try { 
        salaryPackageService0.addSalaryPackage((SalaryPackage) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.tv.tutorials.coolestuffvoorcheops.models.SalaryPackage
         //
         verifyException("com.tv.tutorials.coolestuffvoorcheops.repositories.SalaryPackageRepository$MockitoMock$715869215", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      TreeSet<SalaryPackage> treeSet0 = new TreeSet<SalaryPackage>();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn(treeSet0).when(salaryPackageRepository0).findAll();
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      List<SalaryPackage> list0 = salaryPackageService0.getAllSalaryPackages();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SalaryPackageService salaryPackageService0 = new SalaryPackageService();
      SalaryPackageRepository salaryPackageRepository0 = mock(SalaryPackageRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(salaryPackageRepository0).findById(anyInt());
      Injector.inject(salaryPackageService0, (Class<?>) SalaryPackageService.class, "salaryPackageRepository", (Object) salaryPackageRepository0);
      Injector.validateBean(salaryPackageService0, (Class<?>) SalaryPackageService.class);
      // Undeclared exception!
      try { 
        salaryPackageService0.deleteSalaryPackage(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tv.tutorials.coolestuffvoorcheops.services.impl.SalaryPackageService", e);
      }
  }
}
