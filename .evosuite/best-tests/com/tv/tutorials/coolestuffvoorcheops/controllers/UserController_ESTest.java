/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 16 14:02:15 GMT 2018
 */

package com.cheops.candidatemanager.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.controllers.UserController;
import com.cheops.candidatemanager.models.User;
import com.cheops.candidatemanager.services.impl.CustomUserDetailService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.ui.Model;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserController userController0 = new UserController();
      CustomUserDetailService customUserDetailService0 = mock(CustomUserDetailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "customUserDetailsService", (Object) customUserDetailService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn((Model) null).when(model0).addAttribute(anyString() , any());
      String string0 = userController0.registerUser(model0);
      assertEquals("user", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserController userController0 = new UserController();
      CustomUserDetailService customUserDetailService0 = mock(CustomUserDetailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "customUserDetailsService", (Object) customUserDetailService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.doRegister((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserController userController0 = new UserController();
      CustomUserDetailService customUserDetailService0 = mock(CustomUserDetailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "customUserDetailsService", (Object) customUserDetailService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      String string0 = userController0.doRegister(user0);
      assertEquals("redirect:/", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserController userController0 = new UserController();
      CustomUserDetailService customUserDetailService0 = mock(CustomUserDetailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "customUserDetailsService", (Object) customUserDetailService0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.registerUser((Model) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UserController", e);
      }
  }
}
