/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 25 12:45:23 GMT 2018
 */

package com.cheops.candidatemanager.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.models.Address;
import com.cheops.candidatemanager.models.ApplicationProcess;
import com.cheops.candidatemanager.models.Candidate;
import com.cheops.candidatemanager.models.CandidateSearchResolver;
import com.cheops.candidatemanager.models.Skills;
import com.cheops.candidatemanager.repositories.AddressRepository;
import com.cheops.candidatemanager.repositories.ApplicationProcessRepository;
import com.cheops.candidatemanager.repositories.CandidateRepository;
import com.cheops.candidatemanager.repositories.SkillsRepository;
import com.cheops.candidatemanager.services.impl.ApplicationProcessService;
import com.cheops.candidatemanager.services.impl.CandidateService;
import com.cheops.candidatemanager.services.impl.SkillService;
import java.io.IOException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.Predicate;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CandidateService_ESTest extends CandidateService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      MockDate mockDate0 = new MockDate(3245, 3245, 3245, 3245, (-11), 178);
      Candidate candidate0 = new Candidate("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "", "", mockDate0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "");
      candidate0.setSkillsId(632);
      Optional<Candidate> optional0 = Optional.of(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(candidateRepository0).findAllByNameLikeOrSirNameLike(anyString() , anyString());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      candidateService0.deleteCandidate(0);
      // Undeclared exception!
      try { 
        candidateService0.findAllByNameLikeOrSirNameLike("user.dir", "W]9N%h%MW{uR{taK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      MockDate mockDate0 = new MockDate(3251, 3251, 3251, 3251, (-25), 178);
      Candidate candidate0 = new Candidate("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "", "get_column_name", mockDate0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "");
      candidate0.setSkillsId((-25));
      Optional<Candidate> optional0 = Optional.of(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      Candidate candidate1 = candidateService0.getCandidateById(3251);
      assertEquals("", candidate1.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Candidate candidate0 = new Candidate();
      Optional<Candidate> optional0 = Optional.ofNullable(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      candidate0.setProposedSallaryPackageId(1);
      Candidate candidate1 = candidateService0.getCandidateById(1);
      assertNull(candidate1.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      MockDate mockDate0 = new MockDate(3251, 3251, 3251, 3251, (-25), 178);
      Candidate candidate0 = new Candidate("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "", "get_column_name", mockDate0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "");
      candidate0.setProposedSallaryPackageId((-25));
      Optional<Candidate> optional0 = Optional.of(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      Candidate candidate1 = candidateService0.getCandidateById(3251);
      assertNull(candidate1.getContactChannel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      MockDate mockDate0 = new MockDate(3251, 3251, 3251, 3251, (-25), 178);
      Candidate candidate0 = new Candidate("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "", "get_column_name", mockDate0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "");
      Optional<Candidate> optional0 = Optional.of(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      candidate0.setCurrentSallaryPackageId(961);
      Candidate candidate1 = candidateService0.getCandidateById((-25));
      assertNull(candidate1.getContactChannel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      MockDate mockDate0 = new MockDate(3251, 3251, 3251, 3251, (-25), 3251);
      Candidate candidate0 = new Candidate("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "", "get_column_name", mockDate0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "");
      Optional<Candidate> optional0 = Optional.of(candidate0);
      candidate0.setApplicationProcessId(2252);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      Candidate candidate1 = candidateService0.getCandidateById(3251);
      assertEquals(0, candidate1.getCurrentSallaryPackageId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-246));
      Optional<Candidate> optional0 = Optional.ofNullable(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      Candidate candidate1 = candidateService0.getCandidateById((-912));
      assertNull(candidate1.getPhoneNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      LinkedList<ApplicationProcess> linkedList0 = new LinkedList<ApplicationProcess>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.findAllRecruited();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>(1);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Vector<Candidate> vector0 = new Vector<Candidate>();
      Candidate candidate0 = new Candidate();
      vector0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<Candidate> list0 = candidateService0.getAllCandidatesWithoutActiveApplicationProcess();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAll();
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidates();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>(1);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Vector<Candidate> vector0 = new Vector<Candidate>();
      Candidate candidate0 = new Candidate();
      vector0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllRecruited();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(skillsRepository0).findAllByFrontend(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllFrontend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllByNameLikeOrSirNameLike(anyString() , anyString());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllByNameLikeOrSirNameLike("", "CMfVZ++");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(applicationProcessRepository0).findAll();
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllApplicationProcesses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      Candidate candidate0 = new Candidate();
      // Undeclared exception!
      try { 
        candidateService0.updateCandidate(candidate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Address address0 = new Address();
      Integer integer0 = address0.getId();
      MockDate mockDate0 = new MockDate(943, 943, 943);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = Boolean.valueOf("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads");
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, mockDate0, boolean0, mockDate0, mockDate0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean1, mockDate0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean1, mockDate0, "3;", boolean1, "3;", "");
      Optional.ofNullable(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-246));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllDotnet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        candidateService0.getAllCandidatesWithoutActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.getAllCandidatesWithActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.getAllCandidatesWithActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      LinkedHashSet<Candidate> linkedHashSet0 = new LinkedHashSet<Candidate>();
      linkedHashSet0.add((Candidate) null);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(candidateRepository0).findAll();
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.getAllCandidates();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack0 = new Stack<Skills>();
      HashSet<Skills> hashSet0 = new HashSet<Skills>(stack0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(hashSet0).when(skillsRepository0).findAllById(anyIterable());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      // Undeclared exception!
      try { 
        candidateService0.findByExperienceGreaterThan((-3487), list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.HashSet cannot be cast to java.util.ArrayList
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        candidateService0.findAllRecruitedIn(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      PriorityQueue<ApplicationProcess> priorityQueue0 = new PriorityQueue<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(priorityQueue0).when(applicationProcessRepository0).findAllById(anyIterable());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Vector<Skills> vector0 = new Vector<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(skillsRepository0).findAllByFrontend(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<Integer> list0 = skillsService0.findAllFrontend();
      // Undeclared exception!
      try { 
        candidateService0.findAllRecruitedIn(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.PriorityQueue cannot be cast to java.util.List
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Vector<ApplicationProcess> vector0 = new Vector<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(942);
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Optional.ofNullable((Skills) null);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllRecruited();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      // Undeclared exception!
      try { 
        candidateService0.findAllRecruited();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(942);
      Stack<Skills> stack1 = new Stack<Skills>();
      stack0.add(candidate0);
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByJava(anyBoolean());
      doReturn((Optional) null).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllJava();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      MockInstant.now();
      MockDate mockDate0 = new MockDate();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(942);
      Optional.of(candidate0);
      stack0.add(candidate0);
      MockThaiBuddhistDate.now();
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      Optional<Skills> optional0 = Optional.ofNullable((Skills) null);
      Function<Object, Optional<Skills>> function0 = (Function<Object, Optional<Skills>>) mock(Function.class, new ViolatedAssumptionAnswer());
      Optional<Skills> optional1 = optional0.flatMap((Function<? super Skills, Optional<Skills>>) function0);
      Predicate<Skills> predicate0 = Predicate.isEqual((Object) null);
      optional1.filter(predicate0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(skillsRepository0).findAllByFrontend(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      candidateService0.applicationProcessService = applicationProcessService0;
      // Undeclared exception!
      try { 
        candidateService0.findAllFrontend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-251));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllDotnet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId((-1419));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllByNameLikeOrSirNameLike(anyString() , anyString());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Optional<Skills> optional0 = Optional.ofNullable((Skills) null);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.findAllByNameLikeOrSirNameLike("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.Optional", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.downloadCv("", (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("uploads\\gr'w&4&K9sf%1:s>h");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(mockPrintWriter0).when(httpServletResponse0).getWriter();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        candidateService0.downloadCv("gr'w&4&K9sf%1:s>h", httpServletResponseWrapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<Candidate>) null).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.deleteCandidate((-1041));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      Candidate candidate0 = new Candidate();
      // Undeclared exception!
      try { 
        candidateService0.addCandidate(candidate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(addressRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Candidate candidate0 = new Candidate();
      Optional<Candidate> optional0 = Optional.ofNullable(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      int int0 = 0;
      Candidate candidate1 = new Candidate();
      Address address0 = new Address();
      // Undeclared exception!
      try { 
        candidateService0.saveOrUpdateCandidate(0, candidate1, address0, 3420);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(applicationProcessRepository0).findAllById(anyIterable());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Stack<Integer> stack0 = new Stack<Integer>();
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllRecruitedIn(stack0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("uploads\\gr'w&4&K9sf%1:s>h");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(mockPrintWriter0).when(httpServletResponse0).getWriter();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      candidateService0.downloadCv("gr'w&4&K9sf%1:s>h", httpServletResponseWrapper0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Integer integer0 = new Integer((-296));
      Instant instant0 = MockInstant.ofEpochSecond((long) (-296));
      Date date0 = Date.from(instant0);
      Boolean boolean0 = new Boolean("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads");
      MockDate mockDate0 = new MockDate((-296));
      Boolean boolean1 = Boolean.TRUE;
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, date0, boolean0, date0, date0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean0, date0, "Front-End", "", boolean0, mockDate0, "", boolean1, "", "");
      Optional<ApplicationProcess> optional0 = Optional.ofNullable(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-246));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllDotnet();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Integer integer0 = new Integer((-296));
      Instant instant0 = MockInstant.ofEpochSecond((long) (-296));
      Date date0 = Date.from(instant0);
      Boolean boolean0 = new Boolean("C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads");
      Boolean boolean1 = Boolean.TRUE;
      MockDate mockDate0 = new MockDate((-296));
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, date0, boolean0, date0, date0, "", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean1, date0, "FrnEnd", "", boolean0, mockDate0, "", boolean1, "", "");
      Optional<ApplicationProcess> optional0 = Optional.ofNullable(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-296));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllDotnet();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Boolean boolean0 = Boolean.TRUE;
      MockDate mockDate0 = new MockDate((-296));
      ApplicationProcess applicationProcess0 = new ApplicationProcess((Integer) null, date0, boolean0, date0, date0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean0, date0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean0, mockDate0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", boolean0, "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads", "C:Users\thomas.verhulstDocumentsworkspace-sts-3.9.5.RELEASEcoolestuffvoorcheops/uploads");
      Optional<ApplicationProcess> optional0 = Optional.ofNullable(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Stack<Candidate> stack0 = new Stack<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId((-296));
      stack0.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(candidateRepository0).findAllBySkillsIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack1 = new Stack<Skills>();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack1).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllDotnet();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setApplicationProcessId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Stack<Skills> stack0 = new Stack<Skills>();
      HashSet<Skills> hashSet0 = new HashSet<Skills>(stack0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(skillsRepository0).findAllByDotnet(anyBoolean());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      // Undeclared exception!
      try { 
        skillsService0.findAllDotnet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.SkillsService", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Skills skills0 = new Skills();
      Optional<Skills> optional0 = Optional.ofNullable(skills0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Skills skills0 = new Skills("", 224, "APPLICATION/OCTET-STREAM", "", true, true, true);
      Optional<Skills> optional0 = Optional.ofNullable(skills0);
      skills0.setDotnet(false);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Skills skills0 = new Skills("", 224, "APPLICATION/OCTET-STREAM", "", true, true, false);
      Optional<Skills> optional0 = Optional.ofNullable(skills0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Skills skills0 = new Skills("", 224, "APPLICATION/OCTET-STREAM", "", true, true, true);
      Optional<Skills> optional0 = Optional.ofNullable(skills0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      ArrayList<Candidate> arrayList1 = new ArrayList<Candidate>();
      Candidate candidate0 = new Candidate();
      candidate0.setSkillsId(224);
      arrayList1.add(candidate0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList1).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      Skills skills0 = new Skills("", 224, "APPLICATION/OCTET-STREAM", "", false, false, true);
      Optional<Skills> optional0 = Optional.ofNullable(skills0);
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(skillsRepository0).findById(anyInt());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidatesWithActiveApplicationProcess();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(candidateRepository0).findById(anyInt());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      // Undeclared exception!
      try { 
        candidateService0.deleteCandidate((-1041));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.CandidateService", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>(1);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Vector<Candidate> vector0 = new Vector<Candidate>();
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<Candidate> list0 = candidateService0.getAllCandidatesWithoutActiveApplicationProcess();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      LinkedHashSet<Candidate> linkedHashSet0 = new LinkedHashSet<Candidate>();
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(candidateRepository0).findAll();
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.getAllCandidates();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CandidateService candidateService0 = new CandidateService();
      AddressRepository addressRepository0 = mock(AddressRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "addressRepository", (Object) addressRepository0);
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>(1);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "applicationProcessService", (Object) applicationProcessService0);
      Vector<Candidate> vector0 = new Vector<Candidate>();
      CandidateRepository candidateRepository0 = mock(CandidateRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(candidateRepository0).findAllByApplicationProcessIdIn(anyList());
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "candidateRepository", (Object) candidateRepository0);
      SkillsService skillsService0 = new SkillsService();
      SkillsRepository skillsRepository0 = mock(SkillsRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(skillsService0, (Class<?>) SkillsService.class, "skillsRepository", (Object) skillsRepository0);
      Injector.validateBean(skillsService0, (Class<?>) SkillsService.class);
      Injector.inject(candidateService0, (Class<?>) CandidateService.class, "skillsService", (Object) skillsService0);
      Injector.validateBean(candidateService0, (Class<?>) CandidateService.class);
      List<CandidateSearchResolver> list0 = candidateService0.findAllRecruited();
      assertEquals(0, list0.size());
  }
}
