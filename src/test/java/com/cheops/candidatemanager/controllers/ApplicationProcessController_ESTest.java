/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 16 13:56:07 GMT 2018
 */

package com.cheops.candidatemanager.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.controllers.ApplicationProcessController;
import com.cheops.candidatemanager.models.ApplicationProcess;
import com.cheops.candidatemanager.models.Candidate;
import com.cheops.candidatemanager.services.impl.ApplicationProcessService;
import com.cheops.candidatemanager.services.impl.CandidateService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationProcessController_ESTest extends ApplicationProcessController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      ApplicationProcess applicationProcess0 = mock(ApplicationProcess.class, new ViolatedAssumptionAnswer());
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bindingResult0).hasErrors();
      RedirectAttributes redirectAttributes0 = mock(RedirectAttributes.class, new ViolatedAssumptionAnswer());
      doReturn((RedirectAttributes) null).when(redirectAttributes0).addFlashAttribute(anyString() , any());
      String string0 = applicationProcessController0.save(applicationProcess0, (-1061), bindingResult0, redirectAttributes0);
      assertEquals("updatesucces", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      doReturn((ApplicationProcess) null).when(applicationProcessService0).getApplicationProcessById(anyInt());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      Candidate candidate0 = mock(Candidate.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(candidate0).getApplicationProcessId();
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      doReturn(candidate0).when(candidateService0).getCandidateById(anyInt());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn((Model) null).when(model0).addAttribute(anyString() , any());
      String string0 = applicationProcessController0.searchApplicationProcess(model0, 0);
      assertEquals("updateapplicationprocess", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      ApplicationProcess applicationProcess0 = mock(ApplicationProcess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationProcessController0.save(applicationProcess0, 1, (BindingResult) null, (RedirectAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ApplicationProcessController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      ApplicationProcess applicationProcess0 = mock(ApplicationProcess.class, new ViolatedAssumptionAnswer());
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bindingResult0).hasErrors();
      RedirectAttributes redirectAttributes0 = mock(RedirectAttributes.class, new ViolatedAssumptionAnswer());
      doReturn((RedirectAttributes) null).when(redirectAttributes0).addFlashAttribute(anyString() , any());
      String string0 = applicationProcessController0.save(applicationProcess0, 0, bindingResult0, redirectAttributes0);
      assertEquals("updatesucces", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      ApplicationProcess applicationProcess0 = mock(ApplicationProcess.class, new ViolatedAssumptionAnswer());
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bindingResult0).hasErrors();
      RedirectAttributes redirectAttributes0 = mock(RedirectAttributes.class, new ViolatedAssumptionAnswer());
      RedirectAttributes redirectAttributes1 = mock(RedirectAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(redirectAttributes0).when(redirectAttributes1).addFlashAttribute(anyString() , any());
      String string0 = applicationProcessController0.save(applicationProcess0, 8, bindingResult0, redirectAttributes1);
      assertEquals("updatesucces", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      doReturn((Candidate) null).when(candidateService0).getCandidateById(anyInt());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationProcessController0.searchApplicationProcess(model0, (-3836));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ApplicationProcessController", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ApplicationProcessController applicationProcessController0 = new ApplicationProcessController();
      ApplicationProcessService applicationProcessService0 = mock(ApplicationProcessService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "applicationProcessService", (Object) applicationProcessService0);
      CandidateService candidateService0 = mock(CandidateService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessController0, (Class<?>) ApplicationProcessController.class, "candidateservice", (Object) candidateService0);
      Injector.validateBean(applicationProcessController0, (Class<?>) ApplicationProcessController.class);
      ApplicationProcess applicationProcess0 = mock(ApplicationProcess.class, new ViolatedAssumptionAnswer());
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bindingResult0).hasErrors();
      RedirectAttributes redirectAttributes0 = mock(RedirectAttributes.class, new ViolatedAssumptionAnswer());
      String string0 = applicationProcessController0.save(applicationProcess0, 0, bindingResult0, redirectAttributes0);
      assertEquals("updateapplicationprocess", string0);
  }
}
