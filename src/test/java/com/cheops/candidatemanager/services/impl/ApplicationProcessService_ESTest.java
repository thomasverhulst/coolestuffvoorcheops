/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 25 09:24:36 GMT 2018
 */

package com.cheops.candidatemanager.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.models.ApplicationProcess;
import com.cheops.candidatemanager.repositories.ApplicationProcessRepository;
import com.cheops.candidatemanager.services.impl.ApplicationProcessService;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationProcessService_ESTest extends ApplicationProcessService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      Optional<ApplicationProcess> optional0 = Optional.ofNullable(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      applicationProcessService0.deleteApplicationProcess(1595);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      Optional<ApplicationProcess> optional0 = Optional.of(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(optional0).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      ApplicationProcess applicationProcess1 = applicationProcessService0.getApplicationProcessById(0);
      assertNull(applicationProcess1.getFeedbackFirstConversation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      LinkedHashSet<ApplicationProcess> linkedHashSet0 = new LinkedHashSet<ApplicationProcess>();
      Integer integer0 = new Integer(1);
      MockDate mockDate0 = new MockDate(79, 79, 1);
      Boolean boolean0 = new Boolean(false);
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, mockDate0, (Boolean) null, mockDate0, mockDate0, "Sj0p@>hL}", "", boolean0, mockDate0, "Sj0p@>hL}", "", (Boolean) null, mockDate0, "Sj0p@>hL}", (Boolean) null, "Sj0p@>hL}", "'M?L}oAE>{LBeIeLt.");
      linkedHashSet0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(applicationProcessRepository0).findAll();
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<ApplicationProcess> list0 = applicationProcessService0.getAllApplicationProcesses();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      MockDate mockDate0 = new MockDate((-26), (-1852), (-1724), 675, 1450, (-1667));
      Boolean boolean0 = new Boolean(false);
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, mockDate0, boolean0, mockDate0, mockDate0, "ANY", "ANY", boolean0, mockDate0, "ANY", "uo#", boolean0, mockDate0, "ANY", boolean0, "com.cheops.candidatemanager.services.impl.ApplicationProcessService", (String) null);
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllById(anyIterable());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<Integer> list0 = applicationProcessService0.getAllCandidatesWithActiveApplicationProcess();
      List<ApplicationProcess> list1 = applicationProcessService0.getAllApplicationProcessById(list0);
      assertTrue(list1.contains(applicationProcess0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      // Undeclared exception!
      try { 
        applicationProcessService0.updateApplicationProcess(applicationProcess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(applicationProcess0, "GodLRT#wWO[!y5*qj}|").when(applicationProcessRepository0).save(new ApplicationProcess());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      ApplicationProcess applicationProcess1 = applicationProcessService0.addApplicationProcess((ApplicationProcess) null);
      // Undeclared exception!
      try { 
        applicationProcessService0.updateApplicationProcess(applicationProcess1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.cheops.candidatemanager.models.ApplicationProcess
         //
         verifyException("com.cheops.candidatemanager.repositories.ApplicationProcessRepository$MockitoMock$1987330507", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllCandidatesWithoutActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<ApplicationProcess>) null).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllCandidatesWithActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      Optional<ApplicationProcess> optional0 = Optional.of(applicationProcess0);
      UnaryOperator<ApplicationProcess> unaryOperator0 = UnaryOperator.identity();
      optional0.map((Function<? super ApplicationProcess, ? extends ApplicationProcess>) unaryOperator0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllCandidatesWithActiveApplicationProcess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Stack<ApplicationProcess> stack0 = new Stack<ApplicationProcess>();
      LinkedList<ApplicationProcess> linkedList0 = new LinkedList<ApplicationProcess>(stack0);
      Integer integer0 = null;
      MockDate mockDate0 = new MockDate();
      Boolean boolean0 = null;
      String string0 = "(3NQ;{H|~@4%q^U~";
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllApplicationProcessById(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      Class<ApplicationProcess> class0 = ApplicationProcess.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<ApplicationProcess> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(serviceLoader0).when(applicationProcessRepository0).findAllById(anyIterable());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllApplicationProcessById(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ServiceLoader cannot be cast to java.util.List
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.findAllRecruited();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.findAllByIsRecruitedIn((List<ApplicationProcess>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcess applicationProcess0 = new ApplicationProcess();
      // Undeclared exception!
      try { 
        applicationProcessService0.addApplicationProcess(applicationProcess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getApplicationProcessById(935);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      Boolean boolean0 = Boolean.TRUE;
      MockDate mockDate0 = new MockDate((-474), (-474), (-474), (-474), (-474));
      Boolean boolean1 = new Boolean("");
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, mockDate0, boolean0, mockDate0, mockDate0, "", "", boolean0, mockDate0, "", "", boolean0, mockDate0, "", boolean1, "", "");
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<ApplicationProcess> list0 = applicationProcessService0.findAllByIsRecruitedIn(arrayList0);
      assertFalse(list0.contains(applicationProcess0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      Boolean boolean0 = Boolean.TRUE;
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, (Date) null, boolean0, (Date) null, (Date) null, "", "", boolean0, (Date) null, "", "", boolean0, (Date) null, "", boolean0, "", "");
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      applicationProcessService0.findAllByIsRecruitedIn(arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      Boolean boolean0 = Boolean.TRUE;
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, (Date) null, boolean0, (Date) null, (Date) null, "", "", boolean0, (Date) null, "", "", boolean0, (Date) null, "", boolean0, "", "");
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<Integer> list0 = applicationProcessService0.getAllCandidatesWithoutActiveApplicationProcess();
      assertTrue(list0.contains((-474)));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      Boolean boolean0 = Boolean.TRUE;
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, (Date) null, boolean0, (Date) null, (Date) null, "", "", boolean0, (Date) null, "", "", boolean0, (Date) null, "", boolean0, "", "");
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllBytoBeInvitedForFirstConversation(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<Integer> list0 = applicationProcessService0.getAllCandidatesWithActiveApplicationProcess();
      assertFalse(list0.contains((-474)));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      Integer integer0 = new Integer((-474));
      Boolean boolean0 = Boolean.TRUE;
      ApplicationProcess applicationProcess0 = new ApplicationProcess(integer0, (Date) null, boolean0, (Date) null, (Date) null, "", "", boolean0, (Date) null, "", "", boolean0, (Date) null, "", boolean0, "", "");
      arrayList0.add(applicationProcess0);
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<Integer> list0 = applicationProcessService0.findAllRecruited();
      assertTrue(list0.contains((-474)));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ArrayList<ApplicationProcess> arrayList0 = new ArrayList<ApplicationProcess>();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(applicationProcessRepository0).findAllByIsRecruited(anyBoolean());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      List<Integer> list0 = applicationProcessService0.findAllRecruited();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(applicationProcessRepository0).findAll();
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.getAllApplicationProcesses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(applicationProcessRepository0).findById(anyInt());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      // Undeclared exception!
      try { 
        applicationProcessService0.deleteApplicationProcess((-529));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.cheops.candidatemanager.services.impl.ApplicationProcessService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ApplicationProcessService applicationProcessService0 = new ApplicationProcessService();
      ApplicationProcessRepository applicationProcessRepository0 = mock(ApplicationProcessRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(applicationProcessRepository0).findAllById(anyIterable());
      Injector.inject(applicationProcessService0, (Class<?>) ApplicationProcessService.class, "applicationProcessRepository", (Object) applicationProcessRepository0);
      Injector.validateBean(applicationProcessService0, (Class<?>) ApplicationProcessService.class);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      List<ApplicationProcess> list0 = applicationProcessService0.getAllApplicationProcessById(arrayList0);
      assertNull(list0);
  }
}
