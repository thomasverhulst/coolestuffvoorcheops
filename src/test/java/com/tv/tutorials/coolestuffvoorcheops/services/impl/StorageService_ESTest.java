/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 16 13:53:48 GMT 2018
 */

package com.cheops.candidatemanager.services.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cheops.candidatemanager.configuration.StorageProperties;
import com.cheops.candidatemanager.services.impl.StorageService;
import java.io.IOError;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StorageService_ESTest extends StorageService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(multipartFile0).getInputStream();
      doReturn("Failed to read stored files").when(multipartFile0).getOriginalFilename();
      doReturn(false).when(multipartFile0).isEmpty();
      // Undeclared exception!
      try { 
        storageService0.store(multipartFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageProperties0.setLocation("x");
      storageService0.FileSystemStorageService(storageProperties0);
      storageService0.deleteAll();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      Stream<Path> stream0 = storageService0.loadAll();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      Path path0 = storageService0.load("");
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(46);
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn(pipedInputStream0).when(multipartFile0).getInputStream();
      doReturn("mYj/~?<&r.g@sgXt").when(multipartFile0).getOriginalFilename();
      doReturn(false).when(multipartFile0).isEmpty();
      // Undeclared exception!
      try { 
        storageService0.store(multipartFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(multipartFile0).getOriginalFilename();
      doReturn(false).when(multipartFile0).isEmpty();
      // Undeclared exception!
      try { 
        storageService0.store(multipartFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      // Undeclared exception!
      try { 
        storageService0.loadAsResource("Failed to store file ");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageProperties0.setLocation("L:+X/N7o");
      storageService0.FileSystemStorageService(storageProperties0);
      // Undeclared exception!
      try { 
        storageService0.loadAsResource("");
        fail("Expecting exception: IOError");
      
      } catch(IOError e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageProperties0.setLocation("vr~}SS8aN");
      storageService0.FileSystemStorageService(storageProperties0);
      // Undeclared exception!
      try { 
        storageService0.loadAll();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to read stored files
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      // Undeclared exception!
      try { 
        storageService0.load("|z0}m~)]?TF");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageProperties0.setLocation(":+X/N7o");
      // Undeclared exception!
      try { 
        storageService0.FileSystemStorageService(storageProperties0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageProperties0.setLocation((String) null);
      // Undeclared exception!
      try { 
        storageService0.FileSystemStorageService(storageProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.load("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("upload-dir");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      Resource resource0 = storageService0.loadAsResource("");
      assertFalse(resource0.isOpen());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn("..").when(multipartFile0).getOriginalFilename();
      doReturn(false).when(multipartFile0).isEmpty();
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.store(multipartFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot store file with relative path outside current directory ..
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn("").when(multipartFile0).getOriginalFilename();
      doReturn(true).when(multipartFile0).isEmpty();
      // Undeclared exception!
      try { 
        storageService0.store(multipartFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to store empty file 
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.loadAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      StorageProperties storageProperties0 = new StorageProperties();
      storageService0.FileSystemStorageService(storageProperties0);
      // Undeclared exception!
      try { 
        storageService0.loadAsResource("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not read file: 
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.loadAsResource("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("StorageService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StorageService storageService0 = new StorageService();
      // Undeclared exception!
      try { 
        storageService0.deleteAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("StorageService", e);
      }
  }
}
